const c = require('./config');

class Router {
  constructor(config) {
    this._eventEmitter = config.eventEmitter;
    this._routes = {};
    this._setRequestListener();
  }

  addRoute(routeObj) {
    if (!this._routes.hasOwnProperty(routeObj.route)) {
      this._routes[routeObj.route] = {};
    }
    this._routes[routeObj.route][routeObj.method] = {
      function: routeObj.function,
      middlewares: routeObj.middlewares
    };
  }

  _route(req, res) {
    let route = req.url.split('?')[0];
    if (!this._routes.hasOwnProperty(route) || !this._routes[route].hasOwnProperty(req.method)) {
      console.log(`${c.errors.routeNotFound.code}: ${c.errors.routeNotFound.message} -> ${req.method} ${route}`);
      this._sendNotFoundResponse(res);
      return;
    }

    let middlewares = this._routes[route][req.method].middlewares;
    let handler = this._routes[route][req.method].function;
    let firstMiddleware = prepareMiddlewares(middlewares.length - 1, req, res, () => handler(req, res));
    firstMiddleware();

    function prepareMiddlewares(index, req, res, next) {
      if (index === -1)
        return next;
      return prepareMiddlewares(index - 1, req, res, () => middlewares[index](req, res, next));
    }
  }

  _setRequestListener() {
    this._eventEmitter.on('newReq', (req, res)=> {
      this._route(req, res);
    });
  }

  _sendNotFoundResponse(res) {
    res.stasusCode = c.statusCodes.NOT_FOUND_STATUS_CODE;
    res.setHeader('Content-Type', c.contentTypes.JSON);
    res.end(JSON.stringify(c.errors.routeNotFound));
  }
}

module.exports = Router;